import{_ as s,o as a,c as n,Q as e}from"./chunks/framework.fb0c8ff2.js";const A=JSON.parse('{"title":"Getting started","description":"","frontmatter":{},"headers":[],"relativePath":"guide/getting-started.md","filePath":"guide/getting-started.md","lastUpdated":1691359444000}'),l={name:"guide/getting-started.md"},o=e(`<h1 id="getting-started" tabindex="-1">Getting started <a class="header-anchor" href="#getting-started" aria-label="Permalink to &quot;Getting started&quot;">​</a></h1><h2 id="instalation" tabindex="-1">Instalation <a class="header-anchor" href="#instalation" aria-label="Permalink to &quot;Instalation&quot;">​</a></h2><h3 id="prerequisites" tabindex="-1">Prerequisites <a class="header-anchor" href="#prerequisites" aria-label="Permalink to &quot;Prerequisites&quot;">​</a></h3><ul><li><a href="https://nodejs.org" target="_blank" rel="noreferrer">Node.js</a> version 19 or higher.</li><li>Terminal to install dependencies and run development environment.</li><li>Text editor with TypeScript syntax support. <ul><li>NeoVim is recommended.</li></ul></li><li>Anything suitable as a REST client, for example <a href="https://www.postman.com/" target="_blank" rel="noreferrer">Postman</a>, <a href="https://curl.se/" target="_blank" rel="noreferrer">curl</a> and <a href="https://mitmproxy.org/" target="_blank" rel="noreferrer">mitmproxy</a>.</li><li>A POSIX-compatible environment is recommended.</li></ul><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-6HOHH" id="tab-KPHAOYV" checked="checked"><label for="tab-KPHAOYV">npm</label><input type="radio" name="group-6HOHH" id="tab--MPjP0F"><label for="tab--MPjP0F">pnpm</label><input type="radio" name="group-6HOHH" id="tab-T4GLemT"><label for="tab-T4GLemT">yarn</label></div><div class="blocks"><div class="language-sh active"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">i</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">@semantic-api/api</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">@semantic-api/server</span></span>
<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">i</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-D</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">semantic-mangler</span></span></code></pre></div><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pnpm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">add</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">@semantic-api/api</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">@semantic-api/server</span></span>
<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pnpm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">add</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-D</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">semantic-mangler</span></span></code></pre></div><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">yarn</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">add</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">@semantic-api/api</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">@semantic-api/server</span></span>
<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">yarn</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">add</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-D</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">semantic-mangler</span></span></code></pre></div></div></div><h3 id="setup-helper" tabindex="-1">Setup helper <a class="header-anchor" href="#setup-helper" aria-label="Permalink to &quot;Setup helper&quot;">​</a></h3><p>Stations API ships with a command line setup wizard that will automatically scaffold a basic project. On an empty directory named after your project run:</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-pQ8Ni" id="tab-atvG7Db" checked="checked"><label for="tab-atvG7Db">npm</label></div><div class="blocks"><div class="language-sh active"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">create</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">semantic-api</span></span></code></pre></div></div></div><h2 id="folder-structure" tabindex="-1">Folder structure <a class="header-anchor" href="#folder-structure" aria-label="Permalink to &quot;Folder structure&quot;">​</a></h2><p>Installing the <code>@semantic-api/api</code> package will place a type declaration file named <code>semantic-api.d.ts</code> in your project root folder. This file is important to make types work and shouldn&#39;t be deleted or included in <code>.gitignore</code>. The following folder structure is suggested, but not mandatory. Any arrange will work given that the entrypoint is structured correctly.</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">├── src</span></span>
<span class="line"><span style="color:#A6ACCD;">│   ├── algorithms</span></span>
<span class="line"><span style="color:#A6ACCD;">│   │   ├── example</span></span>
<span class="line"><span style="color:#A6ACCD;">│   │   │   ├── doSomeProcessing.ts</span></span>
<span class="line"><span style="color:#A6ACCD;">│   │   │   └── index.ts</span></span>
<span class="line"><span style="color:#A6ACCD;">│   │   └── index.ts</span></span>
<span class="line"><span style="color:#A6ACCD;">│   ├── collections</span></span>
<span class="line"><span style="color:#A6ACCD;">│   │   ├── pet</span></span>
<span class="line"><span style="color:#A6ACCD;">│   │   │   ├── description.ts</span></span>
<span class="line"><span style="color:#A6ACCD;">│   │   │   ├── get.ts</span></span>
<span class="line"><span style="color:#A6ACCD;">│   │   │   ├── index.ts</span></span>
<span class="line"><span style="color:#A6ACCD;">│   │   │   ├── insert.ts</span></span>
<span class="line"><span style="color:#A6ACCD;">│   │   │   ├── model.ts</span></span>
<span class="line"><span style="color:#A6ACCD;">│   │   │   └── remove.ts</span></span>
<span class="line"><span style="color:#A6ACCD;">│   │   └── index.ts</span></span>
<span class="line"><span style="color:#A6ACCD;">│   ├── infrastructure</span></span>
<span class="line"><span style="color:#A6ACCD;">│   │   ├── accessControl.ts</span></span>
<span class="line"><span style="color:#A6ACCD;">│   │   └── apiConfig.ts</span></span>
<span class="line"><span style="color:#A6ACCD;">│   └── index.ts</span></span>
<span class="line"><span style="color:#A6ACCD;">├── package.json</span></span>
<span class="line"><span style="color:#A6ACCD;">├── semantic-api.d.ts</span></span>
<span class="line"><span style="color:#A6ACCD;">└── tsconfig.json</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Braun, the icon library that ships with <a href="https://savitriframework.github.io/docs/" target="_blank" rel="noreferrer">Savitri</a> dynamically imports the path <code>./collections</code> during the runtime, so if you&#39;re using Savitri or Braun you must create a <code>./collections/index.ts</code> or <code>./collections.ts</code> file and export your collections from there.</p></div><ul><li><code>collections/</code> and <code>algorithms/</code>: resources</li><li><code>infrastructure/accessControl.ts</code>: export an <a href="/access-control/#accesscontrol"><code>AccessControl</code></a> object.</li><li><code>infrastructure/apiConfig.ts</code>: export an <a href="./"><code>ApiConfig</code></a> object.</li><li><code>index.ts</code>: entrypoint file</li></ul><h2 id="the-entrypoint-file" tabindex="-1">The entrypoint file <a class="header-anchor" href="#the-entrypoint-file" aria-label="Permalink to &quot;The entrypoint file&quot;">​</a></h2><p>The entrypoint file (<code>src/index.ts</code>) is where you export your API assets and set up a listening web server. You should also put <code>dist/main.js</code> in your <code>main</code> property of <code>package.json</code>.</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">initWithDatabaseThenStart</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@semantic-api/server</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">apiConfig</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./infrastructure/apiConfig</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">accessControl</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./infrastructure/accessControl</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#A6ACCD;"> collections </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./collections</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#A6ACCD;"> algorithms </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./algorithms</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">initWithDatabaseThenStart</span><span style="color:#A6ACCD;">(apiConfig)</span></span></code></pre></div><h2 id="up-and-running" tabindex="-1">Up and running <a class="header-anchor" href="#up-and-running" aria-label="Permalink to &quot;Up and running&quot;">​</a></h2><p>If you have scaffolded your project using <code>npm create semantic-api</code> then the following scripts must be present in your <code>package.json</code>. Otherwise you shoud create them.</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">scripts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">build</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">semantic-mangler -m build</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">compile</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">semantic-mangler -m compile</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">compile:run</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">npm run compile &amp;&amp; (cd dist; cp ../.env .; node --preserve-symlinks index.js)</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">serve</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">nodemon --ext ts --ignore &#39;dist/**/*&#39; --exec </span><span style="color:#A6ACCD;">\\&quot;</span><span style="color:#C3E88D;">npm run compile:run</span><span style="color:#A6ACCD;">\\&quot;</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">start</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">node ./release/index.js</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>The <code>serve</code> script will start listening in the 3000 and watch for changes in <code>./src</code>. You can learn more about the <code>semantic-mangler</code> CLI tool in the <a href="./">semantic-mangler Reference</a>.</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-03AcS" id="tab-Jt8xQv2" checked="checked"><label for="tab-Jt8xQv2">npm</label><input type="radio" name="group-03AcS" id="tab-TdDEkw-"><label for="tab-TdDEkw-">pnpm</label><input type="radio" name="group-03AcS" id="tab-3tr3EFI"><label for="tab-3tr3EFI">yarn</label></div><div class="blocks"><div class="language-sh active"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">serve</span></span></code></pre></div><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pnpm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">serve</span></span></code></pre></div><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">yarn</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">serve</span></span></code></pre></div></div></div><p>The dev server should be running at <code>http://localhost:3000</code>. Make requests with a REST client or integrate directly with <a href="./">Savitri</a> to see your new API in action.</p><h2 id="what-s-next" tabindex="-1">What&#39;s next? <a class="header-anchor" href="#what-s-next" aria-label="Permalink to &quot;What&#39;s next?&quot;">​</a></h2>`,23),p=[o];function t(r,c,i,y,C,D){return a(),n("div",null,p)}const u=s(l,[["render",t]]);export{A as __pageData,u as default};
